# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: github.com/veeruns/Go-Lambda

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - mkdir -p $CI_PROJECT_DIR/artifacts
  - cd $GOPATH/src/$REPO_NAME
  - make dep
  - go get -t ./...

stages:
    - test
    - build

format:
    stage: test
    script:
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet $(go list ./... | grep -v /vendor/)
compile:
    stage: build
    script:
      - cd $GOPATH/src/$REPO_NAME
      - cd MuxServer && GOOS=linux GOARCH=arm GOARM=5 go build  -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/artifacts/Server && cd -
      - cd Utils/setuid && go build  -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/artifacts/setuid && cd -
      - cd Utils/upload-to-dynamodb && go build  -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/artifacts/dynamodb && cd -


    artifacts:
      paths:
        - artificats/Server
        - artificats/setuid
        - artificats/dynamodb
